--- services/java/com/android/server/TelephonyRegistry.java
+++ services/java/com/android/server/TelephonyRegistry.java
@@ -63,7 +63,10 @@
     private static final boolean DBG = false;
     private static final boolean DBG_LOC = false;
 
-    private static class Record {
+    // BEGIN privacy-modified
+    // private static class Record {
+    public static class Record {
+    // END privacy-modified
         String pkgForDebug;
 
         IBinder binder;
@@ -81,29 +84,32 @@
         }
     }
 
-    private final Context mContext;
+    // BEGIN privacy-modified
+    // these were all private, now protected
+
+    protected final Context mContext;
 
     // access should be inside synchronized (mRecords) for these two fields
-    private final ArrayList<IBinder> mRemoveList = new ArrayList<IBinder>();
-    private final ArrayList<Record> mRecords = new ArrayList<Record>();
+    protected final ArrayList<IBinder> mRemoveList = new ArrayList<IBinder>();
+    protected final ArrayList<Record> mRecords = new ArrayList<Record>();
 
     private final IBatteryStats mBatteryStats;
 
-    private int mCallState = TelephonyManager.CALL_STATE_IDLE;
+    protected int mCallState = TelephonyManager.CALL_STATE_IDLE;
 
-    private String mCallIncomingNumber = "";
+    protected String mCallIncomingNumber = "";
 
-    private ServiceState mServiceState = new ServiceState();
+    protected ServiceState mServiceState = new ServiceState();
 
-    private SignalStrength mSignalStrength = new SignalStrength();
+    protected SignalStrength mSignalStrength = new SignalStrength();
 
-    private boolean mMessageWaiting = false;
+    protected boolean mMessageWaiting = false;
 
-    private boolean mCallForwarding = false;
+    protected boolean mCallForwarding = false;
 
-    private int mDataActivity = TelephonyManager.DATA_ACTIVITY_NONE;
+    protected int mDataActivity = TelephonyManager.DATA_ACTIVITY_NONE;
 
-    private int mDataConnectionState = TelephonyManager.DATA_UNKNOWN;
+    protected int mDataConnectionState = TelephonyManager.DATA_UNKNOWN;
 
     private boolean mDataConnectionPossible = false;
 
@@ -117,14 +123,14 @@
 
     private LinkCapabilities mDataConnectionLinkCapabilities;
 
-    private Bundle mCellLocation = new Bundle();
-
-    private int mDataConnectionNetworkType;
+    protected Bundle mCellLocation = new Bundle();
 
-    private int mOtaspMode = ServiceStateTracker.OTASP_UNKNOWN;
+    protected int mDataConnectionNetworkType;
 
-    private List<CellInfo> mCellInfo = null;
+    protected int mOtaspMode = ServiceStateTracker.OTASP_UNKNOWN;
 
+    protected List<CellInfo> mCellInfo = null;
+    // END privacy-modified
     static final int PHONE_STATE_PERMISSION_MASK =
                 PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR |
                 PhoneStateListener.LISTEN_CALL_STATE |
@@ -165,7 +171,11 @@
     // calls go through a oneway interface and local calls going through a
     // handler before they get to app code.
 
-    TelephonyRegistry(Context context) {
+    // BEGIN privacy-modified
+    // made protected to allow subclassing
+    // TelephonyRegistry(Context context) {
+    protected TelephonyRegistry(Context context) {
+    // END privacy-modified
         CellLocation  location = CellLocation.getEmpty();
 
         // Note that location can be null for non-phone builds like
@@ -312,7 +322,11 @@
         }
     }
 
-    private void remove(IBinder binder) {
+    // BEGIN privacy-modified
+    // made protected to allow subclassing
+    // private void remove(IBinder binder) {
+    protected void remove(IBinder binder) {
+    // END privacy-modified
         synchronized (mRecords) {
             final int recordCount = mRecords.size();
             for (int i = 0; i < recordCount; i++) {
@@ -351,9 +365,15 @@
         }
         synchronized (mRecords) {
             mServiceState = state;
+            // BEGIN privacy-added
+	        mServiceState.setOperatorName("", "", "");
+	        // END privacy-added
             for (Record r : mRecords) {
                 if ((r.events & PhoneStateListener.LISTEN_SERVICE_STATE) != 0) {
                     try {
+                        // BEGIN privacy-added
+			            state.setOperatorName("", "", "");
+			            // END privacy-added
                         r.callback.onServiceStateChanged(new ServiceState(state));
                     } catch (RemoteException ex) {
                         mRemoveList.add(r.binder);
@@ -639,7 +659,11 @@
     // the legacy intent broadcasting
     //
 
-    private void broadcastServiceStateChanged(ServiceState state) {
+    // BEGIN privacy-modified
+    // made protected to allow subclassing
+    // private void broadcastServiceStateChanged(ServiceState state) {
+    protected void broadcastServiceStateChanged(ServiceState state) {
+    // END privacy-modified
         long ident = Binder.clearCallingIdentity();
         try {
             mBatteryStats.notePhoneState(state.getState());
@@ -738,7 +762,10 @@
         mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL);
     }
 
-    private boolean checkNotifyPermission(String method) {
+    // BEGIN privacy-modified
+    // made protected to allow subclassing
+    protected boolean checkNotifyPermission(String method) {
+    // END privacy-modified
         if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE)
                 == PackageManager.PERMISSION_GRANTED) {
             return true;
@@ -749,7 +776,10 @@
         return false;
     }
 
-    private void checkListenerPermission(int events) {
+    // BEGIN privacy-modified
+    // made protected to allow subclassing
+    protected void checkListenerPermission(int events) {
+    // END privacy-modified
         if ((events & PhoneStateListener.LISTEN_CELL_LOCATION) != 0) {
             mContext.enforceCallingOrSelfPermission(
                     android.Manifest.permission.ACCESS_COARSE_LOCATION, null);
@@ -768,7 +798,10 @@
         }
     }
 
-    private void handleRemoveListLocked() {
+    // BEGIN privacy-modified
+    // made protected to allow subclassing
+    protected void handleRemoveListLocked() {
+    // END privacy-modified
         if (mRemoveList.size() > 0) {
             for (IBinder b: mRemoveList) {
                 remove(b);
